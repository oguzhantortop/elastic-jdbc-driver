package io.github.oguzhantortop.elasticjdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class ElasticJdbcStatement implements Statement {

	private ElasticJdbcConnection connection;
	private ElasticResultSet resultSet;

	public ElasticJdbcStatement(ElasticJdbcConnection connection) {
		this.connection = connection;
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return iface.cast(this);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return iface.isInstance(this);
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		resultSet = new ElasticResultSet(ElasticUtil.queryElasticSearch(sql));
		return resultSet;
	}
	


	public int executeUpdate(String sql) throws SQLException {
		return 0;
	}

	public void close() throws SQLException {
		if (resultSet != null) {
			resultSet.close();
		}
	}

	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	public void setMaxFieldSize(int max) throws SQLException {
		// not implemented
	}

	public int getMaxRows() throws SQLException {
		return 0;
	}

	public void setMaxRows(int max) throws SQLException {
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
	}

	public int getQueryTimeout() throws SQLException {
		// not supported
		return 0;
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		// not supported
	}

	public void cancel() throws SQLException {
		// not supported
	}

	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	public void clearWarnings() throws SQLException {
	}

	public void setCursorName(String name) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql) throws SQLException {
		resultSet = new ElasticResultSet(ElasticUtil.queryElasticSearch(sql));
		return true;
		//return !resultSet.getInternalQuery().isEmpty(); // todo: add also if it is an update query
	}

	public ResultSet getResultSet() throws SQLException {
		return resultSet;
	}

	public int getUpdateCount() throws SQLException {
		return -1;
	}

	public boolean getMoreResults() throws SQLException {
		return resultSet.next();
	}

	public void setFetchDirection(int direction) throws SQLException {
		resultSet.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return resultSet.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		resultSet.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return resultSet.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return ResultSet.CONCUR_READ_ONLY;
	}

	public int getResultSetType() throws SQLException {
		return ResultSet.TYPE_FORWARD_ONLY;
	}

	public void addBatch(String sql) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void clearBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int[] executeBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public Connection getConnection() throws SQLException {
		return connection;
	}

	public boolean getMoreResults(int current) throws SQLException {
		return getMoreResults();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	public boolean isClosed() throws SQLException {
		return resultSet.isClosed();
	}

	public void setPoolable(boolean poolable) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean isPoolable() throws SQLException {
		return false;
	}

	public void closeOnCompletion() throws SQLException {
//		resultSet.setCloseable(true);
		
	}

	public boolean isCloseOnCompletion() throws SQLException {
		//return resultSet.isCloseable();
		return true;
	}

}
